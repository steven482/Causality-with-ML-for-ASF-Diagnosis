# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_absolute_error, r2_score

# Create structured dataset for ASF trend analysis
trend_data = {
    "Year": [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023],
    "Outbreaks": [50, 75, 120, 200, 350, 500, 420, 380, 310],  # Number of ASF outbreaks per year
    "Mortality_Rate (%)": [95, 96, 97, 98, 98, 99, 99, 99, 99],  # Percentage mortality rate
    "Seasonal_Peak": ["Summer", "Summer", "Autumn", "Autumn", "Winter", "Winter", "Spring", "Spring", "Summer"],
    "Risk_Factor": ["Trade", "Trade", "Wildlife", "Wildlife", "Climate", "Climate", "Farming", "Farming", "Trade"],
}

# Convert to DataFrame
df_trend = pd.DataFrame(trend_data)

# Save dataset as CSV file in Windows-compatible directory
csv_trend_filename = "ASF_Trends_Analysis.csv"  # Update path if necessary
df_trend.to_csv(csv_trend_filename, index=False)

# Display DataFrame to verify structure
print("ASF Trends Dataset:")
print(df_trend.head())

# Encode categorical variables
label_encoder = LabelEncoder()
df_trend["Seasonal_Peak"] = label_encoder.fit_transform(df_trend["Seasonal_Peak"])
df_trend["Risk_Factor"] = label_encoder.fit_transform(df_trend["Risk_Factor"])

# Define features (X) and target variable (y)
X = df_trend[["Year", "Seasonal_Peak", "Risk_Factor"]]
y = df_trend["Outbreaks"]

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Random Forest model to predict ASF outbreaks
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate model performance
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print performance metrics
print("\nModel Performance Metrics:")
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# Plot trend of ASF outbreaks
plt.figure(figsize=(10, 5))
sns.lineplot(x=df_trend["Year"], y=df_trend["Outbreaks"], marker="o", label="Actual Outbreaks")
plt.xlabel("Year")
plt.ylabel("ASF Outbreaks")
plt.title("ASF Outbreak Trends Over the Years")
plt.legend()
plt.show()
